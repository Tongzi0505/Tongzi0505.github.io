<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>test2</title>
      <link href="/2025/02/21/test2/"/>
      <url>/2025/02/21/test2/</url>
      
        <content type="html"><![CDATA[<h1 id="AI绘画入门教程-一"><a href="#AI绘画入门教程-一" class="headerlink" title="AI绘画入门教程(一)"></a>AI绘画入门教程(一)</h1><h2 id="0-前言"><a href="#0-前言" class="headerlink" title="0.前言"></a>0.前言</h2><p><strong>实际上写这个也是防止我以后忘了怎么用的XD。</strong></p><p>本教程与B站大部分教程类似，不过加入了我从零开始学习的经验。实际上入门是非常简单的事，就是优化图片的过程会比较的繁琐，<strong>入门教程</strong>我会分成WebUI与ComfyUI这两种不同的使用框架进行教程。需要注意本教程是在个人电脑部署模型生图而非云端生图(云端参数调整也可参考本教程)</p><p><strong>WebUI教程流程为:WebUI安装-模型下载-参数配置-WebUI基础出图</strong><br><strong>ComfyUI教程流程为:ComfyUI安装-模型下载-基础工作流搭建-常见报错排查-ComfyUi基础出图</strong></p><p>由于我不太喜欢WebUI以及我的电脑配置其实不是很好，WebUI的进阶教程将<strong>无限期延后</strong>(其实是我没学)<br>至于ComfyUI的进阶教学，等我写完基础教程就会在这里放链接，没看到就是还没写啦。</p><p>对于WebUI与ComfyUI的区别在这里先说一下。<br>WebUI各个功能是组合起来的，运行逻辑被隐藏起来。优点是对于新手比较友好，不需要学习整个生图流程的原理，按教程配置参数即可。缺点是灵活性较低且占用内存显存较多，对配置较低的用户不太友好。</p><p>ComfUI则以是工作流形式运行，运行逻辑完全外显，各个功能被打散为各个节点。优点是灵活度很高，内存显存占用低，可以生成在WebUI因性能问题无法生成的图。缺点是较难上手，需要学习生图流程的原理，不然难以搭建可用的工作流。</p><p><strong>推荐配置</strong>:<br>window10以上<br>CPU不做强制性要求<br><strong>GPU最好为20系以后Nvidia的独立显卡，显存最低4G(A卡需要自行前往 AMD 官网下载安装 HIP SDK，核显只能用CPU跑)</strong><br>内存推荐8G以上<br>整合包与模型最好放在固态硬盘中</p><h2 id="1-WebUI的安装"><a href="#1-WebUI的安装" class="headerlink" title="1.WebUI的安装"></a>1.WebUI的安装</h2><p>本教程使用<a href="https://www.bilibili.com/video/BV1iM4y1y7oA/">秋葉aaaki大佬的WebUI一键包</a>，比较方便，下载解压即可，视频中有详细教程，这里不再赘述。</p><h2 id="2-模型下载"><a href="#2-模型下载" class="headerlink" title="2.模型下载"></a>2.模型下载</h2><p>这里给出三种下载模型的方式</p><p>1.在Civitai下载(需要魔法，模型较全，<a href="https://cvitai.cn/">国内镜像</a>)<br>2.在<a href="https://www.liblib.art/">LiblibAI</a>下载(访问快，但是部分模型不允许下载，小部分模型可能找不到)<br>3.在<a href="https://huggingface.co/">Hugging Face</a>下载(访问慢，模型较全，国内镜像<a href="https://hf-mirror.com/">HF-mirror</a>)</p><p>目前主流的Checkpoint大模型如下</p><table><thead><tr><th align="center">基础算法</th><th align="center">以基础算法为底模的模型</th><th align="center">其它模型</th></tr></thead><tbody><tr><td align="center">SD1.5</td><td align="center">NoobAI(基于SDXL)</td><td align="center">FLUX</td></tr><tr><td align="center">SD3</td><td align="center">Pony(基于SDXL)</td><td align="center"></td></tr><tr><td align="center">SDXL</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">SD3.5</td><td align="center"></td><td align="center"></td></tr></tbody></table><p>大家可以自己去搜一下看看各自特点与性能要求是什么再下载使用，我这里的举例肯定也是不完全的，选择自己喜欢的即可。<br>一键包也内置了基于SD1.5训练的anything-v5模型</p><h2 id="3-参数配置"><a href="#3-参数配置" class="headerlink" title="3.参数配置"></a>3.参数配置</h2><p>启动WebUI后，会在浏览器打开WebUI工作界面</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>如何用nonebot+napcat手搓属于自己的QQ机器人</title>
      <link href="/2025/02/18/bot/"/>
      <url>/2025/02/18/bot/</url>
      
        <content type="html"><![CDATA[<h1 id="写在开头"><a href="#写在开头" class="headerlink" title="写在开头"></a>写在开头</h1><p><strong>第一次做自己的个人博客，也是第一次写教程，markdown什么的用的不太好，先给大家道个歉。</strong></p><h1 id="进入正题"><a href="#进入正题" class="headerlink" title="进入正题"></a>进入正题</h1><h2 id="一-部署nonebot"><a href="#一-部署nonebot" class="headerlink" title="一.部署nonebot"></a>一.部署nonebot</h2><p>基于<a href="https://nonebot.dev/docs/quick-start">nonebot官方文档</a>修改而来,加入了我部署时遇到的一些问题的解决方法。</p><p><strong>请确保已经安装 Python 且版本 &gt;&#x3D; 3.9</strong><br>建议使用虚拟环境以免发生干扰,若不使用虚拟环境请确保已经卸载可能存在的 NoneBot v1！！！<br>终端输入以下代码以删除可能存在的NoneBot v1</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip uninstall nonebot</span><br></pre></td></tr></table></figure><p>在本章节中，我们将介绍如何使用脚手架来创建一个 NoneBot 简易项目。项目将基于 nb-cli 脚手架运行，并允许我们从商店安装插件。</p><h3 id="1-安装nb-cil脚手架"><a href="#1-安装nb-cil脚手架" class="headerlink" title="1.安装nb-cil脚手架"></a>1.安装nb-cil脚手架</h3><p><strong>确保你已经安装了 Python 3.9 及以上版本，然后在终端中执行以下命令：</strong></p><p>安装pipx</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python -m pip install --user pipx</span><br><span class="line">python -m pipx ensurepath</span><br></pre></td></tr></table></figure><p>如果在此步骤的输出中出现了“open a new terminal”或者“re-login”字样，那么请关闭当前终端并重新打开一个新的终端。</p><p>安装脚手架</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pipx install nb-cli</span><br></pre></td></tr></table></figure><p>安装完成后，你可以在命令行使用 <code>nb</code> 命令来使用脚手架。如果出现无法找到命令的情况（例如出现“Command not found”字样），请参考 <a href="https://pypa.github.io/pipx/">pipx 文档</a> 检查你的环境变量。</p><p>如果使用<code>pipx</code>命令时发现下载缓慢,请考虑更改为<code>pip</code>命令，如将</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pipx install nb-cli</span><br></pre></td></tr></table></figure><p>更换为</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install nb-cli</span><br></pre></td></tr></table></figure><p>两种方式安装效果是一样的，若依旧下载缓慢，<strong>推荐更换pip源为国内镜像源</strong>。</p><p>PYPI国内源<br>阿里云 <a href="http://mirrors.aliyun.com/pypi/simple/">http://mirrors.aliyun.com/pypi/simple/</a><br>豆瓣(douban) <a href="http://pypi.douban.com/simple/">http://pypi.douban.com/simple/</a><br>清华大学 <a href="https://pypi.tuna.tsinghua.edu.cn/simple/">https://pypi.tuna.tsinghua.edu.cn/simple/</a><br>中国科学技术大学 <a href="http://pypi.mirrors.ustc.edu.cn/simple/">http://pypi.mirrors.ustc.edu.cn/simple/</a><br>我一般使用阿里云</p><p>这里我们提供两种换源的方式：</p><p>临时换源</p><p>临时换源只需要在pip安装包时，加上一个<code>-i</code>参数后接源的url即可：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载python中的nb-cil包，这里使用的是阿里源</span></span><br><span class="line">pip install nb-cil -i http://mirrors.aliyun.com/pypi/simple/</span><br></pre></td></tr></table></figure><p>显然不是一个一劳永逸的方法，只有下少量包的时候有使用的场景，下面介绍永久换源的方法，通过这个方式换源，那么以后我们下载的包就可以全部从这个url中下载了，这样大大减轻了我们的工作量，明显比临时换源的方法更好。</p><p><strong>永久换源</strong></p><p>windows在%HOMEPATH%\pip\pip.ini中修改其中的内容(例如：C:\Users\hp\AppData\Roaming\pip\pip.ini)<br>进入文件新增&#x2F;修改内容</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[global]</span></span><br><span class="line"><span class="attr">index-url</span>=http://mirrors.aliyun.com/pypi/simple/</span><br><span class="line"><span class="section">[install]</span></span><br><span class="line"><span class="attr">trusted-host</span>=mirrors.aliyun.com/</span><br></pre></td></tr></table></figure><p>保存并退出，至此我们完成了pip源的修改与脚手架的安装。</p><h3 id="2-创建Nonebot项目"><a href="#2-创建Nonebot项目" class="headerlink" title="2.创建Nonebot项目"></a>2.创建Nonebot项目</h3><h4 id="使用脚手架来创建一个项目："><a href="#使用脚手架来创建一个项目：" class="headerlink" title="使用脚手架来创建一个项目："></a>使用脚手架来创建一个项目：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nb create</span><br></pre></td></tr></table></figure><p>这一指令将会执行创建项目的流程，你将会看到一些询问：</p><ol><li><p>项目模板</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[?] 选择一个要使用的模板: bootstrap (初学者或用户)</span><br></pre></td></tr></table></figure><p>这里我们选择 <code>bootstrap</code> 模板，它是一个简单的项目模板，能够安装商店插件。如果你需要<strong>自行编写插件</strong>，这里请选择 <code>simple</code> 模板。</p></li><li><p>项目名称</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[?] 项目名称: awesome-bot</span><br></pre></td></tr></table></figure><p>这里我们以 <code>awesome-bot</code> 为例，作为项目名称。你可以根据自己的需要来命名。</p></li><li><p>其他选项<br>请注意，多选项使用<strong>空格</strong>选中或取消，<strong>回车</strong>确认。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[?] 要使用哪些驱动器? FastAPI (FastAPI 驱动器)</span><br><span class="line">[?] 要使用哪些适配器? Console (基于终端的交互式适配器)</span><br><span class="line">[?] 立即安装依赖? (Y/n) Yes</span><br><span class="line">[?] 创建虚拟环境? (Y/n) Yes</span><br></pre></td></tr></table></figure><p>这里我们选择了创建虚拟环境，nb-cli 在之后的操作中将会自动使用这个虚拟环境。如果你不需要自动创建虚拟环境或者已经创建了其他虚拟环境，nb-cli 将会安装依赖至当前激活的 Python 虚拟环境。<br><strong>适配器建议安装OneBot V11协议，不要安装V12，为后续接入NapCat做准备。</strong></p></li><li><p>选择内置插件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[?] 要使用哪些内置插件? <span class="built_in">echo</span></span><br></pre></td></tr></table></figure><p>这里我们选择 <code>echo</code> 插件作为示例。这是一个简单的复读回显插件，可以用于测试你的机器人是否正常运行。</p></li></ol><h4 id="运行项目"><a href="#运行项目" class="headerlink" title="运行项目"></a>运行项目</h4><p>在项目创建完成后，你可以在<strong>项目目录</strong>中使用以下命令来运行项目：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nb run</span><br></pre></td></tr></table></figure><p>你现在应该已经运行起来了你的第一个 NoneBot 项目了！请注意，生成的项目中使用了 <code>FastAPI</code> 驱动器和 <code>Console</code> 适配器，你之后可以自行修改配置或安装其他适配器。</p><h4 id="尝试使用"><a href="#尝试使用" class="headerlink" title="尝试使用"></a>尝试使用</h4><p>在项目运行起来后，<code>Console</code> 适配器会在你的终端启动交互模式，你可以直接在输入框中输入 <code>/echo hello world</code> 来测试你的机器人是否正常运行。</p><p>至此，我们完成了Nonebot基础框架的搭建，下面我们来安装插件以实现更多的功能。</p><h2 id="二-Nonebot插件的安装"><a href="#二-Nonebot插件的安装" class="headerlink" title="二.Nonebot插件的安装"></a>二.Nonebot插件的安装</h2><p>NoneBot 提供了一个<a href="https://nonebot.dev/store/plugins">商店</a>，商店内容均由社区开发者贡献。你可以在商店中查找你需要的适配器和插件等，进行安装或者参考其文档等。商店中每个内容的卡片都包含了其名称和简介等信息，点击<strong>卡片右上角</strong>链接图标即可跳转到其主页。在商店插件页面中，点击你需要安装的插件下方的 <code>点击复制安装命令</code> 按钮，即可复制 <code>nb-cli</code> 命令。请在你的<strong>项目目录</strong>下执行该命令。<code>nb-cli</code> 会自动安装插件并将其添加到加载列表中。这里以DeepSeek插件举例。<br>在商店中查找到DeepSeek插件安装命令如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nb plugin install nonebot-plugin-deepseek</span><br></pre></td></tr></table></figure><p>在Nonebot项目根目录打开终端并输入运行即可安装，可装载多个插件，更多关于插件的信息详见<a href="https://nonebot.dev/docs/tutorial/store">Nonebot官方文档-获取商店内容</a></p><p><strong>在部署完成Nonebot后，要将其上线至QQ我们还需要部署通信框架，下面使用Napcat进行部署，也可查看<a href="https://napneko.github.io/guide/start-install">Napcat官方文档</a></strong></p><h2 id="三-NapCat部署"><a href="#三-NapCat部署" class="headerlink" title="三.NapCat部署"></a>三.NapCat部署</h2><p><strong>这里推荐使用Shell方式并使用一键部署包进行部署</strong></p><h3 id="1-NapCat-Win-一键版本"><a href="#1-NapCat-Win-一键版本" class="headerlink" title="1.NapCat.Win.一键版本"></a>1.NapCat.Win.一键版本</h3><p>特殊说明: 一键版仅适用 <code>Windows.AMD64</code> 无需安装QQ和NapCat 已内置</p><ol><li>前往 <a href="https://github.com/NapNeko/NapCatQQ/releases">NapCatQQ 的 release 页面</a> 下载无头绿色版本解压</li><li>启动对应BAT即可</li></ol><p>如果需要快速启动 新建quick.bat文件写入如下例子</p><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">NapCatWinBootMain.exe <span class="number">10001</span></span><br></pre></td></tr></table></figure><h3 id="2-配置NapCat-webUI"><a href="#2-配置NapCat-webUI" class="headerlink" title="2.配置NapCat webUI"></a>2.配置NapCat webUI</h3><p><strong>配置网络类型 必备知识</strong></p><table><thead><tr><th align="left">类型</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">HTTP 服务端</td><td align="left">NapCat 作为 Http 请求接受方 接收对应接口调用并回应 的单工模型</td></tr><tr><td align="left">HTTP 客户端</td><td align="left">NapCat 作为 Http 请求发起方 将事件推送至插件&#x2F;应用框架 的单工模型</td></tr><tr><td align="left">WebSocket 服务端</td><td align="left">通常指正向 WS 既能主动推送事件也能接收请求 的双工模型</td></tr><tr><td align="left">WebSocket 客户端</td><td align="left">通常指反向 WS 既能主动推送事件也能接收请求 的双工模型</td></tr></tbody></table><p><strong>通过 WebUI 配置 OneBot 服务</strong></p><p>如果你已经启动了 NapCat, 并且有多于 1 个开放端口，则可以通过 WebUI 进行配置。<br>默认地址为 <code>0.0.0.0</code>, 即监听所有地址。<br>当配置了不可用的地址时 WebUI 将被禁用。<br>默认端口为 <code>6099</code>.当端口被设置为 <code>0</code> 时将禁用 WebUI。<br>当端口被占用时, 会自动对端口 +1, 直到找到可用端口 (最多尝试 100 次, 失败则会禁用 WebUI), 端口号会在启动日志中显示。<br>启动后可在启动日志中看到形如 <code>[WebUi] WebUi Local Panel Url: http://127.0.0.1:6099/webui?token=xxxx</code> 的 token 信息。</p><p>访问 <code>http://ip:port/webui/</code>，使用token登录然后进行以下操作:</p><ol><li>进入 QQ 登录, 点击 <code>QRCode</code> 进行二维码登录.</li><li>登录成功后, 即可进入网络配置, 点击 “新建” 创建对应的服务器或客户端.(如果是公网部署, 请<strong>务必启用 Token</strong>)</li><li>请在创建时勾选<strong>保存时启用</strong>, 或者创建完成后手动启用.</li><li>访问 <code>http://ip:port</code> 检查端口是否正常. (此处的 <code>port</code> 指 2 中配置的端口, 请不要与 WebUI 端口混淆)</li></ol><h3 id="3-接入Nonebot框架"><a href="#3-接入Nonebot框架" class="headerlink" title="3.接入Nonebot框架"></a>3.接入Nonebot框架</h3><ol><li><p>这里假设你已经安装了 OneBot 适配器</p><p>默认情况下，NoneBot 是启用了反向 ws 的，如果出现 403，可能是默认配置问题，需要配置 <code>token</code> 才能正常连接。</p><p>具体方法为：修改 NoneBot 配置文件 <code>.env</code>，添加 <code>ONEBOT_ACCESS_TOKEN=你在 NapCat 中配置的 token</code>。</p><p>然后，使用<code>nb run</code>启动 NoneBot，可以看到 NoneBot 输出的端口号，如 <code>8080</code>。</p></li><li><p>配置 NapCat</p><p>在 NapCat 配置添加反向 ws 地址，地址为 <code>ws://127.0.0.1:8080/onebot/v11/ws</code>, 这里的 <code>8080</code> 是 NoneBot 输出的端口号，<code>/onebot/v11/ws</code> 是 NoneBot onebot 适配器默认的路径</p></li></ol><p>至此，我们已经完成了Nonebot+NapCat的部署，你的QQ机器人已经准备就绪。</p><p><strong>不过仍需提醒，官方并不接受非官方机器人的部署，随时做好机器人账号被风控的准备。</strong></p><h1 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h1><p>网站刚起步喵，评论区什么的还没做好，等我再研究一下(真的有人看吗)，如果真的有问题可以<a href="https://space.bilibili.com/474227615">b站</a>私信找我，谢谢！</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
